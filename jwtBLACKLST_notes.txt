jwt_redis_blocklist = redis.StrictRedis(host="localhost", port=6379, db=0, decode_responses=True)

@jwt.token_in_blocklist_loader
def check_if_token_is_revoked(jwt_header, jwt_payload):
    jti = jwt_payload['jti']
    token_in_redis = jwt_redis_blocklist.get(jti)
    return token_in_redis is not None

@app.route("/api/logout", methods=["DELETE"])
def logout():
    jti = get_jwt()['jti']
    jwt_redis_blocklist.set(jti, "", ex=ACCESS_EXPIRES)
    return redirect(url_for('index'))


# For ease we are not going to blacklist right now.
# For production need to blacklist tokens in order to prevent cross site scripting attacks
# Or relay attacks
